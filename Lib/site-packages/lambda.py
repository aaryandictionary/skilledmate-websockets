import json
from datetime import datetime
import pytz
import boto3
import botocore
from aws_requests_auth.aws_auth import AWSRequestsAuth
import requests
from decimal import Decimal
import os
import sys
import logging
import pymysql

rds_host  = "skilledmate.cfbz13lsgo8m.ap-south-1.rds.amazonaws.com"
name = "SkilledMate"
password = "SkilledMate1998"
db_name = "skilledmate"

logger = logging.getLogger()
logger.setLevel(logging.INFO)

try:
    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)
except pymysql.MySQLError as e:
    logger.error("ERROR: Unexpected error: Could not connect to MySQL instance.")
    logger.error(e)
    sys.exit()


def applambda(event,context):
    connectionId=event["requestContext"]["connectionId"]
    body=json.loads(event["body"])

    convType=body["convType"]
    senderId=body["senderId"]
    msg=body["msg"]
    content=body["cont"]
    content_type=body["contType"]
    conversation_id=body["conversationId"]
    receiverId=body["receiverId"]
    messageId=body["messageId"]
    tz = pytz.timezone('Asia/Kolkata')
    MessageDateTime=datetime.now(tz).isoformat()

    myCursor=conn.cursor()


    if convType=="MONO":
        if conversation_id=="-1":
            senderReceiver="SELECT conversation_user.conversation_id FROM conversation_user LEFT JOIN conversations ON conversation_user.conversation_id=conversations.id WHERE conversation_user.user_id IN (%s,%s) AND conversations.id=conversation_user.conversation_id AND conversations.conv_type='MONO' LIMIT 1"
            sendRecVal=(int(senderId),int(receiverId))
            myCursor.execute(senderReceiver,sendRecVal)
            mcs=myCursor.fetchone()
            if mcs is not None:
                conversation_id=mcs[0]
            else:
                sql="INSERT INTO conversations (conv_type,created_at,updated_at) VALUES (%s,%s,%s)"
                convVal=(convType,MessageDateTime,MessageDateTime)
                myCursor.execute(sql,convVal)
                conversation_id=myCursor.lastrowid
                conv_user="INSERT INTO conversation_user (user_id,conversation_id) VALUES (%s,%s)"
                conv_values=[(int(senderId),int(conversation_id)),(int(receiverId),int(conversation_id))]
                myCursor.executemany(conv_user,conv_values)
        
        if content_type=="TEXT":    
            message="INSERT INTO messages (conversation_id,sender_id,text_msg,content,content_type,created_at,updated_at) VALUES (%s,%s,%s,%s,%s,%s,%s)"
            msgvalue=(int(conversation_id),int(senderId),msg,content,content_type,MessageDateTime,MessageDateTime)
            myCursor.execute(message,msgvalue)
            messageId=myCursor.lastrowid
            conn.commit()

    else:
        if conversation_id!="-1":
            if content_type=="TEXT":
                message="INSERT INTO messages (conversation_id,sender_id,text_msg,content,content_type,created_at,updated_at) VALUES (%s,%s,%s,%s,%s,%s,%s)"
                msgvalue=(int(conversation_id),int(senderId),msg,content,content_type,MessageDateTime,MessageDateTime)
                myCursor.execute(message,msgvalue)
                messageId=myCursor.lastrowid
                conn.commit()

    sqlSName="SELECT name FROM users WHERE id="+str(senderId)
    myCursor.execute(sqlSName)
    senderName=myCursor.fetchone()[0]
    jsonObjToSend={"id":messageId,"sender_id":senderId,"text_msg":msg,"conversation_id":conversation_id,"content":content,"content_type":content_type,"created_at":MessageDateTime,"sender_name":senderName}

    connectionIds="SELECT users.connection_id FROM conversation_user LEFT JOIN users ON users.id=conversation_user.user_id WHERE conversation_id ="+str(conversation_id)+" AND users.is_connected="+str(1)+" AND user_id !="+senderId
    myCursor.execute(connectionIds)

    for x in myCursor.fetchall():
        # jsonObjToSend={"MessageID":"ID","Message":msg,"SenderID":senderId}
        sendDirectMessage(x[0],jsonObjToSend)

    notificationTokens="SELECT users.token FROM conversation_user LEFT JOIN users ON users.id=conversation_user.user_id WHERE conversation_id ="+str(conversation_id)+" AND users.is_connected="+str(0)+" AND user_id !="+senderId
    myCursor.execute(notificationTokens)

    nt=[]

    for y in myCursor.fetchall():
        nt.append(y[0])

    if len(nt)>0:
        # jsonObjToSend={"MessageID":"ID","Message":msg,"SenderID":senderId}
        sendNotification(nt,jsonObjToSend,"Message from "+senderName,msg)
    
    return {"statusCode":200,"body":str(jsonObjToSend)}
    

def sendDirectMessage(token,jsonobj):
    access_key=os.environ['access_key']
    secret_key=os.environ['secret_key']

    auth=AWSRequestsAuth(aws_access_key=access_key,
                        aws_secret_access_key=secret_key,aws_host='g5961tky75.execute-api.ap-south-1.amazonaws.com',
                        aws_region='ap-south-1',aws_service='execute-api')

    url='https://g5961tky75.execute-api.ap-south-1.amazonaws.com/production/%40connections/'+token.replace("=","")+"%3D"
    req=requests.post(url,auth=auth,data=str(jsonobj))
    # print(req.text)

def sendNotification(tokens,jsonobj,title,message):
    serverToken="AAAAZVmDgAg:APA91bHKwQaXI6DwThIGi1vah1UCnbAP7FgiW-ez5OgY3R0tJ0gsE5OaPYAC_eW0t4CNEVNjTCfJqJBlnsDMmTQAOc_tXnx6UX5uGy4nP3AdMdrrgjjm61GYGNn8_SUfbWHVPRmpSxA3"
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'key=' + serverToken,
      }

    body = {
          'notification': {'title': title,
                            'body': message
                            },
        #   'to':token,
          "registration_ids": tokens,
          'priority': 'high',
          'data': jsonobj,
        }
    
    response = requests.post("https://fcm.googleapis.com/fcm/send",headers = headers, data=json.dumps(body))
    # print(response.status_code)

    # print(response.json())